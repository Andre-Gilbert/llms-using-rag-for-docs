

pandas.read_hdf#


pandas.read_hdf(path_or_buf, key=None, mode='r', errors='strict', where=None, start=None, stop=None, columns=None, iterator=False, chunksize=None, **kwargs)[source]#
Read from the store, close it if we opened it.
Retrieve pandas object stored in file, optionally based on where
criteria.

Warning
Pandas uses PyTables for reading and writing HDF5 files, which allows
serializing object-dtype data with pickle when using the âfixedâ format.
Loading pickled data received from untrusted sources can be unsafe.
See: https://docs.python.org/3/library/pickle.html for more.


Parameters:

path_or_bufstr, path object, pandas.HDFStoreAny valid string path is acceptable. Only supports the local file system,
remote URLs and file-like objects are not supported.
If you want to pass in a path object, pandas accepts any
os.PathLike.
Alternatively, pandas accepts an open pandas.HDFStore object.

keyobject, optionalThe group identifier in the store. Can be omitted if the HDF file
contains a single pandas object.

mode{ârâ, âr+â, âaâ}, default ârâMode to use when opening the file. Ignored if path_or_buf is a
pandas.HDFStore. Default is ârâ.

errorsstr, default âstrictâSpecifies how encoding and decoding errors are to be handled.
See the errors argument for open() for a full list
of options.

wherelist, optionalA list of Term (or convertible) objects.

startint, optionalRow number to start selection.

stopint, optionalRow number to stop selection.

columnslist, optionalA list of columns names to return.

iteratorbool, optionalReturn an iterator object.

chunksizeint, optionalNumber of rows to include in an iteration when using an iterator.

**kwargsAdditional keyword arguments passed to HDFStore.



Returns:

objectThe selected object. Return type depends on the object stored.





See also

DataFrame.to_hdfWrite a HDF file from a DataFrame.

HDFStoreLow-level access to HDF files.



Examples
>>> df = pd.DataFrame([[1, 1.0, 'a']], columns=['x', 'y', 'z'])  
>>> df.to_hdf('./store.h5', 'data')  
>>> reread = pd.read_hdf('./store.h5')  




