

pandas.read_feather#


pandas.read_feather(path, columns=None, use_threads=True, storage_options=None, dtype_backend=_NoDefault.no_default)[source]#
Load a feather-format object from the file path.

Parameters:

pathstr, path object, or file-like objectString, path object (implementing os.PathLike[str]), or file-like
object implementing a binary read() function. The string could be a URL.
Valid URL schemes include http, ftp, s3, and file. For file URLs, a host is
expected. A local file could be: file://localhost/path/to/table.feather.

columnssequence, default NoneIf not provided, all columns are read.

use_threadsbool, default TrueWhether to parallelize reading using multiple threads.

storage_optionsdict, optionalExtra options that make sense for a particular storage connection, e.g.
host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
are forwarded to urllib.request.Request as header options. For other
URLs (e.g. starting with âs3://â, and âgcs://â) the key-value pairs are
forwarded to fsspec.open. Please see fsspec and urllib for more
details, and for more examples on storage options refer here.

New in version 1.2.0.


dtype_backend{ânumpy_nullableâ, âpyarrowâ}, default ânumpy_nullableâBack-end data type applied to the resultant DataFrame
(still experimental). Behaviour is as follows:

"numpy_nullable": returns nullable-dtype-backed DataFrame
(default).
"pyarrow": returns pyarrow-backed nullable ArrowDtype
DataFrame.


New in version 2.0.




Returns:

type of object stored in file



Examples
>>> df = pd.read_feather("path/to/file.feather")  




