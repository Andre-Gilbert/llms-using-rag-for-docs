

pandas.testing.assert_series_equal#


pandas.testing.assert_series_equal(left, right, check_dtype=True, check_index_type='equiv', check_series_type=True, check_names=True, check_exact=False, check_datetimelike_compat=False, check_categorical=True, check_category_order=True, check_freq=True, check_flags=True, rtol=1e-05, atol=1e-08, obj='Series', *, check_index=True, check_like=False)[source]#
Check that left and right Series are equal.

Parameters:

leftSeries
rightSeries
check_dtypebool, default TrueWhether to check the Series dtype is identical.

check_index_typebool or {âequivâ}, default âequivâWhether to check the Index class, dtype and inferred_type
are identical.

check_series_typebool, default TrueWhether to check the Series class is identical.

check_namesbool, default TrueWhether to check the Series and Index names attribute.

check_exactbool, default FalseWhether to compare number exactly.

check_datetimelike_compatbool, default FalseCompare datetime-like which is comparable ignoring dtype.

check_categoricalbool, default TrueWhether to compare internal Categorical exactly.

check_category_orderbool, default TrueWhether to compare category order of internal Categoricals.

check_freqbool, default TrueWhether to check the freq attribute on a DatetimeIndex or TimedeltaIndex.

check_flagsbool, default TrueWhether to check the flags attribute.

New in version 1.2.0.


rtolfloat, default 1e-5Relative tolerance. Only used when check_exact is False.

atolfloat, default 1e-8Absolute tolerance. Only used when check_exact is False.

objstr, default âSeriesâSpecify object name being compared, internally used to show appropriate
assertion message.

check_indexbool, default TrueWhether to check index equivalence. If False, then compare only values.

New in version 1.3.0.


check_likebool, default FalseIf True, ignore the order of the index. Must be False if check_index is False.
Note: same labels must be with the same data.

New in version 1.5.0.





Examples
>>> from pandas import testing as tm
>>> a = pd.Series([1, 2, 3, 4])
>>> b = pd.Series([1, 2, 3, 4])
>>> tm.assert_series_equal(a, b)




