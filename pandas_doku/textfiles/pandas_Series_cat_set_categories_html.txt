

pandas.Series.cat.set_categories#


Series.cat.set_categories(*args, **kwargs)[source]#
Set the categories to the specified new categories.
new_categories can include new categories (which will result in
unused categories) or remove old categories (which results in values
set to NaN). If rename=True, the categories will simply be renamed
(less or more items than in old categories will result in values set to
NaN or in unused categories respectively).
This method can be used to perform more than one action of adding,
removing, and reordering simultaneously and is therefore faster than
performing the individual steps via the more specialised methods.
On the other hand this methods does not do checks (e.g., whether the
old categories are included in the new categories on a reorder), which
can result in surprising changes, for example when using special string
dtypes, which does not considers a S1 string equal to a single char
python string.

Parameters:

new_categoriesIndex-likeThe categories in new order.

orderedbool, default FalseWhether or not the categorical is treated as a ordered categorical.
If not given, do not change the ordered information.

renamebool, default FalseWhether or not the new_categories should be considered as a rename
of the old categories or as reordered categories.



Returns:

Categorical with reordered categories.


Raises:

ValueErrorIf new_categories does not validate as categories





See also

rename_categoriesRename categories.

reorder_categoriesReorder categories.

add_categoriesAdd new categories.

remove_categoriesRemove the specified categories.

remove_unused_categoriesRemove categories which are not used.



Examples
For pandas.Series:
>>> raw_cat = pd.Categorical(['a', 'b', 'c', 'A'],
...                           categories=['a', 'b', 'c'], ordered=True)
>>> ser = pd.Series(raw_cat)
>>> ser
0   a
1   b
2   c
3   NaN
dtype: category
Categories (3, object): ['a' < 'b' < 'c']


>>> ser.cat.set_categories(['A', 'B', 'C'], rename=True)
0   A
1   B
2   C
3   NaN
dtype: category
Categories (3, object): ['A' < 'B' < 'C']


For pandas.CategoricalIndex:
>>> ci = pd.CategoricalIndex(['a', 'b', 'c', 'A'],
...                          categories=['a', 'b', 'c'], ordered=True)
>>> ci
CategoricalIndex(['a', 'b', 'c', nan], categories=['a', 'b', 'c'],
                 ordered=True, dtype='category')


>>> ci.set_categories(['A', 'b', 'c'])
CategoricalIndex([nan, 'b', 'c', nan], categories=['A', 'b', 'c'],
                 ordered=True, dtype='category')
>>> ci.set_categories(['A', 'b', 'c'], rename=True)
CategoricalIndex(['A', 'b', 'c', nan], categories=['A', 'b', 'c'],
                 ordered=True, dtype='category')




