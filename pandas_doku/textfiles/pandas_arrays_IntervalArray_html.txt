

pandas.arrays.IntervalArray#


class pandas.arrays.IntervalArray(data, closed=None, dtype=None, copy=False, verify_integrity=True)[source]#
Pandas array for interval data that are closed on the same side.

Parameters:

dataarray-like (1-dimensional)Array-like (ndarray, DateTimeArray, TimeDeltaArray) containing
Interval objects from which to build the IntervalArray.

closed{âleftâ, ârightâ, âbothâ, âneitherâ}, default ârightâWhether the intervals are closed on the left-side, right-side, both or
neither.

dtypedtype or None, default NoneIf None, dtype will be inferred.

copybool, default FalseCopy the input data.

verify_integritybool, default TrueVerify that the IntervalArray is valid.





See also

IndexThe base pandas Index type.

IntervalA bounded slice-like interval; the elements of an IntervalArray.

interval_rangeFunction to create a fixed frequency IntervalIndex.

cutBin values into discrete Intervals.

qcutBin values into equal-sized Intervals based on rank or sample quantiles.



Notes
See the user guide
for more.
Examples
A new IntervalArray can be constructed directly from an array-like of
Interval objects:
>>> pd.arrays.IntervalArray([pd.Interval(0, 1), pd.Interval(1, 5)])
<IntervalArray>
[(0, 1], (1, 5]]
Length: 2, dtype: interval[int64, right]


It may also be constructed using one of the constructor
methods: IntervalArray.from_arrays(),
IntervalArray.from_breaks(), and IntervalArray.from_tuples().
Attributes


left
Return the left endpoints of each Interval in the IntervalArray as an Index.

right
Return the right endpoints of each Interval in the IntervalArray as an Index.

closed
String describing the inclusive side the intervals.

mid
Return the midpoint of each Interval in the IntervalArray as an Index.

length
Return an Index with entries denoting the length of each Interval.

is_empty
Indicates if an interval is empty, meaning it contains no points.

is_non_overlapping_monotonic
Return a boolean whether the IntervalArray is non-overlapping and monotonic.



Methods


from_arrays(left,Â right[,Â closed,Â copy,Â dtype])
Construct from two arrays defining the left and right bounds.

from_tuples(data[,Â closed,Â copy,Â dtype])
Construct an IntervalArray from an array-like of tuples.

from_breaks(breaks[,Â closed,Â copy,Â dtype])
Construct an IntervalArray from an array of splits.

contains(other)
Check elementwise if the Intervals contain the value.

overlaps(other)
Check elementwise if an Interval overlaps the values in the IntervalArray.

set_closed(closed)
Return an identical IntervalArray closed on the specified side.

to_tuples([na_tuple])
Return an ndarray (if self is IntervalArray) or Index (if self is IntervalIndex) of tuples of the form (left, right).





