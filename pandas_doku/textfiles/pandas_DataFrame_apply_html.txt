

pandas.DataFrame.apply#


DataFrame.apply(func, axis=0, raw=False, result_type=None, args=(), by_row='compat', **kwargs)[source]#
Apply a function along an axis of the DataFrame.
Objects passed to the function are Series objects whose index is
either the DataFrameâs index (axis=0) or the DataFrameâs columns
(axis=1). By default (result_type=None), the final return type
is inferred from the return type of the applied function. Otherwise,
it depends on the result_type argument.

Parameters:

funcfunctionFunction to apply to each column or row.

axis{0 or âindexâ, 1 or âcolumnsâ}, default 0Axis along which the function is applied:

0 or âindexâ: apply function to each column.
1 or âcolumnsâ: apply function to each row.


rawbool, default FalseDetermines if row or column is passed as a Series or ndarray object:

False : passes each row or column as a Series to the
function.
True : the passed function will receive ndarray objects
instead.
If you are just applying a NumPy reduction function this will
achieve much better performance.


result_type{âexpandâ, âreduceâ, âbroadcastâ, None}, default NoneThese only act when axis=1 (columns):

âexpandâ : list-like results will be turned into columns.
âreduceâ : returns a Series if possible rather than expanding
list-like results. This is the opposite of âexpandâ.
âbroadcastâ : results will be broadcast to the original shape
of the DataFrame, the original index and columns will be
retained.

The default behaviour (None) depends on the return value of the
applied function: list-like results will be returned as a Series
of those. However if the apply function returns a Series these
are expanded to columns.

argstuplePositional arguments to pass to func in addition to the
array/series.

by_rowFalse or âcompatâ, default âcompatâOnly has an effect when func is a listlike or dictlike of funcs
and the func isnât a string.
If âcompatâ, will if possible first translate the func into pandas
methods (e.g. Series().apply(np.sum) will be translated to
Series().sum()). If that doesnât work, will try call to apply again with
by_row=True and if that fails, will call apply again with
by_row=False (backward compatible).
If False, the funcs will be passed the whole Series at once.

New in version 2.1.0.


**kwargsAdditional keyword arguments to pass as keywords arguments to
func.



Returns:

Series or DataFrameResult of applying func along the given axis of the
DataFrame.





See also

DataFrame.mapFor elementwise operations.

DataFrame.aggregateOnly perform aggregating type operations.

DataFrame.transformOnly perform transforming type operations.



Notes
Functions that mutate the passed object can produce unexpected
behavior or errors and are not supported. See Mutating with User Defined Function (UDF) methods
for more details.
Examples
>>> df = pd.DataFrame([[4, 9]] * 3, columns=['A', 'B'])
>>> df
   A  B
0  4  9
1  4  9
2  4  9


Using a numpy universal function (in this case the same as
np.sqrt(df)):
>>> df.apply(np.sqrt)
     A    B
0  2.0  3.0
1  2.0  3.0
2  2.0  3.0


Using a reducing function on either axis
>>> df.apply(np.sum, axis=0)
A    12
B    27
dtype: int64


>>> df.apply(np.sum, axis=1)
0    13
1    13
2    13
dtype: int64


Returning a list-like will result in a Series
>>> df.apply(lambda x: [1, 2], axis=1)
0    [1, 2]
1    [1, 2]
2    [1, 2]
dtype: object


Passing result_type='expand' will expand list-like results
to columns of a Dataframe
>>> df.apply(lambda x: [1, 2], axis=1, result_type='expand')
   0  1
0  1  2
1  1  2
2  1  2


Returning a Series inside the function is similar to passing
result_type='expand'. The resulting column names
will be the Series index.
>>> df.apply(lambda x: pd.Series([1, 2], index=['foo', 'bar']), axis=1)
   foo  bar
0    1    2
1    1    2
2    1    2


Passing result_type='broadcast' will ensure the same shape
result, whether list-like or scalar is returned by the function,
and broadcast it along the axis. The resulting column names will
be the originals.
>>> df.apply(lambda x: [1, 2], axis=1, result_type='broadcast')
   A  B
0  1  2
1  1  2
2  1  2




