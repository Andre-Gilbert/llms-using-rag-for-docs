

pandas.Index#


class pandas.Index(data=None, dtype=None, copy=False, name=None, tupleize_cols=True)[source]#
Immutable sequence used for indexing and alignment.
The basic object storing axis labels for all pandas objects.

Changed in version 2.0.0: Index can hold all numpy numeric dtypes (except float16). Previously only
int64/uint64/float64 dtypes were accepted.


Parameters:

dataarray-like (1-dimensional)
dtypeNumPy dtype (default: object)If dtype is None, we find the dtype that best fits the data.
If an actual dtype is provided, we coerce to that dtype if itâs safe.
Otherwise, an error will be raised.

copyboolMake a copy of input ndarray.

nameobjectName to be stored in the index.

tupleize_colsbool (default: True)When True, attempt to create a MultiIndex if possible.





See also

RangeIndexIndex implementing a monotonic integer range.

CategoricalIndexIndex of Categorical s.

MultiIndexA multi-level, or hierarchical Index.

IntervalIndexAn Index of Interval s.

DatetimeIndexIndex of datetime64 data.

TimedeltaIndexIndex of timedelta64 data.

PeriodIndexIndex of Period data.



Notes
An Index instance can only contain hashable objects.
An Index instance can not hold numpy float16 dtype.
Examples
>>> pd.Index([1, 2, 3])
Index([1, 2, 3], dtype='int64')


>>> pd.Index(list('abc'))
Index(['a', 'b', 'c'], dtype='object')


>>> pd.Index([1, 2, 3], dtype="uint8")
Index([1, 2, 3], dtype='uint8')


Attributes


T
Return the transpose, which is by definition self.

array
The ExtensionArray of the data backing this Series or Index.

dtype
Return the dtype object of the underlying data.

has_duplicates
Check if the Index has duplicate values.

hasnans
Return True if there are any NaNs.

inferred_type
Return a string of the type inferred from the values.

is_monotonic_decreasing
Return a boolean if the values are equal or decreasing.

is_monotonic_increasing
Return a boolean if the values are equal or increasing.

is_unique
Return if the index has unique values.

name
Return Index or MultiIndex name.

nbytes
Return the number of bytes in the underlying data.

ndim
Number of dimensions of the underlying data, by definition 1.

nlevels
Number of levels.

shape
Return a tuple of the shape of the underlying data.

size
Return the number of elements in the underlying data.

values
Return an array representing the data in the Index.





empty


names




Methods


all(*args,Â **kwargs)
Return whether all elements are Truthy.

any(*args,Â **kwargs)
Return whether any element is Truthy.

append(other)
Append a collection of Index options together.

argmax([axis,Â skipna])
Return int position of the largest value in the Series.

argmin([axis,Â skipna])
Return int position of the smallest value in the Series.

argsort(*args,Â **kwargs)
Return the integer indices that would sort the index.

asof(label)
Return the label from the index, or, if not present, the previous one.

asof_locs(where,Â mask)
Return the locations (indices) of labels in the index.

astype(dtype[,Â copy])
Create an Index with values cast to dtypes.

copy([name,Â deep])
Make a copy of this object.

delete(loc)
Make new Index with passed location(-s) deleted.

diff([periods])
Computes the difference between consecutive values in the Index object.

difference(other[,Â sort])
Return a new Index with elements of index not in other.

drop(labels[,Â errors])
Make new Index with passed list of labels deleted.

drop_duplicates(*[,Â keep])
Return Index with duplicate values removed.

droplevel([level])
Return index with requested level(s) removed.

dropna([how])
Return Index without NA/NaN values.

duplicated([keep])
Indicate duplicate index values.

equals(other)
Determine if two Index object are equal.

factorize([sort,Â use_na_sentinel])
Encode the object as an enumerated type or categorical variable.

fillna([value,Â downcast])
Fill NA/NaN values with the specified value.

format([name,Â formatter,Â na_rep])
Render a string representation of the Index.

get_indexer(target[,Â method,Â limit,Â tolerance])
Compute indexer and mask for new index given the current index.

get_indexer_for(target)
Guaranteed return of an indexer even when non-unique.

get_indexer_non_unique(target)
Compute indexer and mask for new index given the current index.

get_level_values(level)
Return an Index of values for requested level.

get_loc(key)
Get integer location, slice or boolean mask for requested label.

get_slice_bound(label,Â side)
Calculate slice bound that corresponds to given label.

groupby(values)
Group the index labels by a given array of values.

holds_integer()
(DEPRECATED) Whether the type is an integer type.

identical(other)
Similar to equals, but checks that object attributes and types are also equal.

infer_objects([copy])
If we have an object dtype, try to infer a non-object dtype.

insert(loc,Â item)
Make new Index inserting new item at location.

intersection(other[,Â sort])
Form the intersection of two Index objects.

is_(other)
More flexible, faster check like is but that works through views.

is_boolean()
(DEPRECATED) Check if the Index only consists of booleans.

is_categorical()
(DEPRECATED) Check if the Index holds categorical data.

is_floating()
(DEPRECATED) Check if the Index is a floating type.

is_integer()
(DEPRECATED) Check if the Index only consists of integers.

is_interval()
(DEPRECATED) Check if the Index holds Interval objects.

is_numeric()
(DEPRECATED) Check if the Index only consists of numeric data.

is_object()
(DEPRECATED) Check if the Index is of the object dtype.

isin(values[,Â level])
Return a boolean array where the index values are in values.

isna()
Detect missing values.

isnull()
Detect missing values.

item()
Return the first element of the underlying data as a Python scalar.

join(other,Â *[,Â how,Â level,Â ...])
Compute join_index and indexers to conform data structures to the new index.

map(mapper[,Â na_action])
Map values using an input mapping or function.

max([axis,Â skipna])
Return the maximum value of the Index.

memory_usage([deep])
Memory usage of the values.

min([axis,Â skipna])
Return the minimum value of the Index.

notna()
Detect existing (non-missing) values.

notnull()
Detect existing (non-missing) values.

nunique([dropna])
Return number of unique elements in the object.

putmask(mask,Â value)
Return a new Index of the values set with the mask.

ravel([order])
Return a view on self.

reindex(target[,Â method,Â level,Â limit,Â ...])
Create index with target's values.

rename(name[,Â inplace])
Alter Index or MultiIndex name.

repeat(repeats[,Â axis])
Repeat elements of a Index.

round([decimals])
Round each value in the Index to the given number of decimals.

searchsorted(value[,Â side,Â sorter])
Find indices where elements should be inserted to maintain order.

set_names(names,Â *[,Â level,Â inplace])
Set Index or MultiIndex name.

shift([periods,Â freq])
Shift index by desired number of time frequency increments.

slice_indexer([start,Â end,Â step])
Compute the slice indexer for input labels and step.

slice_locs([start,Â end,Â step])
Compute slice locations for input labels.

sort(*args,Â **kwargs)
Use sort_values instead.

sort_values([return_indexer,Â ascending,Â ...])
Return a sorted copy of the index.

sortlevel([level,Â ascending,Â ...])
For internal compatibility with the Index API.

str
alias of StringMethods

symmetric_difference(other[,Â result_name,Â sort])
Compute the symmetric difference of two Index objects.

take(indices[,Â axis,Â allow_fill,Â fill_value])
Return a new Index of the values selected by the indices.

to_flat_index()
Identity method.

to_frame([index,Â name])
Create a DataFrame with a column containing the Index.

to_list()
Return a list of the values.

to_numpy([dtype,Â copy,Â na_value])
A NumPy ndarray representing the values in this Series or Index.

to_series([index,Â name])
Create a Series with both index and values equal to the index keys.

tolist()
Return a list of the values.

transpose(*args,Â **kwargs)
Return the transpose, which is by definition self.

union(other[,Â sort])
Form the union of two Index objects.

unique([level])
Return unique values in the index.

value_counts([normalize,Â sort,Â ascending,Â ...])
Return a Series containing counts of unique values.

where(cond[,Â other])
Replace values where the condition is False.





view






