

pandas.DataFrame.bfill#


DataFrame.bfill(*, axis=None, inplace=False, limit=None, downcast=_NoDefault.no_default)[source]#
Fill NA/NaN values by using the next valid observation to fill the gap.

Parameters:

axis{0 or âindexâ} for Series, {0 or âindexâ, 1 or âcolumnsâ} for DataFrameAxis along which to fill missing values. For Series
this parameter is unused and defaults to 0.

inplacebool, default FalseIf True, fill in-place. Note: this will modify any
other views on this object (e.g., a no-copy slice for a column in a
DataFrame).

limitint, default NoneIf method is specified, this is the maximum number of consecutive
NaN values to forward/backward fill. In other words, if there is
a gap with more than this number of consecutive NaNs, it will only
be partially filled. If method is not specified, this is the
maximum number of entries along the entire axis where NaNs will be
filled. Must be greater than 0 if not None.

downcastdict, default is NoneA dict of item->dtype of what to downcast if possible,
or the string âinferâ which will try to downcast to an appropriate
equal type (e.g. float64 to int64 if possible).



Returns:

Series/DataFrame or NoneObject with missing values filled or None if inplace=True.




Examples
For Series:
>>> s = pd.Series([1, None, None, 2])
>>> s.bfill()
0    1.0
1    2.0
2    2.0
3    2.0
dtype: float64
>>> s.bfill(limit=1)
0    1.0
1    NaN
2    2.0
3    2.0
dtype: float64


With DataFrame:
>>> df = pd.DataFrame({'A': [1, None, None, 4], 'B': [None, 5, None, 7]})
>>> df
      A     B
0   1.0   NaN
1   NaN   5.0
2   NaN   NaN
3   4.0   7.0
>>> df.bfill()
      A     B
0   1.0   5.0
1   4.0   5.0
2   4.0   7.0
3   4.0   7.0
>>> df.bfill(limit=1)
      A     B
0   1.0   5.0
1   NaN   5.0
2   4.0   7.0
3   4.0   7.0




