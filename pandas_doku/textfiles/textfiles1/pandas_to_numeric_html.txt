

pandas.to_numeric#


pandas.to_numeric(arg, errors='raise', downcast=None, dtype_backend=_NoDefault.no_default)[source]#
Convert argument to a numeric type.
The default return dtype is float64 or int64
depending on the data supplied. Use the downcast parameter
to obtain other dtypes.
Please note that precision loss may occur if really large numbers
are passed in. Due to the internal limitations of ndarray, if
numbers smaller than -9223372036854775808 (np.iinfo(np.int64).min)
or larger than 18446744073709551615 (np.iinfo(np.uint64).max) are
passed in, it is very likely they will be converted to float so that
they can be stored in an ndarray. These warnings apply similarly to
Series since it internally leverages ndarray.

Parameters:

argscalar, list, tuple, 1-d array, or SeriesArgument to be converted.

errors{âignoreâ, âraiseâ, âcoerceâ}, default âraiseâ
If âraiseâ, then invalid parsing will raise an exception.
If âcoerceâ, then invalid parsing will be set as NaN.
If âignoreâ, then invalid parsing will return the input.


downcaststr, default NoneCan be âintegerâ, âsignedâ, âunsignedâ, or âfloatâ.
If not None, and if the data has been successfully cast to a
numerical dtype (or if the data was numeric to begin with),
downcast that resulting data to the smallest numerical dtype
possible according to the following rules:

âintegerâ or âsignedâ: smallest signed int dtype (min.: np.int8)
âunsignedâ: smallest unsigned int dtype (min.: np.uint8)
âfloatâ: smallest float dtype (min.: np.float32)

As this behaviour is separate from the core conversion to
numeric values, any errors raised during the downcasting
will be surfaced regardless of the value of the âerrorsâ input.
In addition, downcasting will only occur if the size
of the resulting dataâs dtype is strictly larger than
the dtype it is to be cast to, so if none of the dtypes
checked satisfy that specification, no downcasting will be
performed on the data.

dtype_backend{ânumpy_nullableâ, âpyarrowâ}, default ânumpy_nullableâBack-end data type applied to the resultant DataFrame
(still experimental). Behaviour is as follows:

"numpy_nullable": returns nullable-dtype-backed DataFrame
(default).
"pyarrow": returns pyarrow-backed nullable ArrowDtype
DataFrame.


New in version 2.0.




Returns:

retNumeric if parsing succeeded.
Return type depends on input. Series if Series, otherwise ndarray.





See also

DataFrame.astypeCast argument to a specified dtype.

to_datetimeConvert argument to datetime.

to_timedeltaConvert argument to timedelta.

numpy.ndarray.astypeCast a numpy array to a specified type.

DataFrame.convert_dtypesConvert dtypes.



Examples
Take separate series and convert to numeric, coercing when told to
>>> s = pd.Series(['1.0', '2', -3])
>>> pd.to_numeric(s)
0    1.0
1    2.0
2   -3.0
dtype: float64
>>> pd.to_numeric(s, downcast='float')
0    1.0
1    2.0
2   -3.0
dtype: float32
>>> pd.to_numeric(s, downcast='signed')
0    1
1    2
2   -3
dtype: int8
>>> s = pd.Series(['apple', '1.0', '2', -3])
>>> pd.to_numeric(s, errors='ignore')
0    apple
1      1.0
2        2
3       -3
dtype: object
>>> pd.to_numeric(s, errors='coerce')
0    NaN
1    1.0
2    2.0
3   -3.0
dtype: float64


Downcasting of nullable integer and floating dtypes is supported:
>>> s = pd.Series([1, 2, 3], dtype="Int64")
>>> pd.to_numeric(s, downcast="integer")
0    1
1    2
2    3
dtype: Int8
>>> s = pd.Series([1.0, 2.1, 3.0], dtype="Float64")
>>> pd.to_numeric(s, downcast="float")
0    1.0
1    2.1
2    3.0
dtype: Float32




