

pandas.DataFrame.between_time#


DataFrame.between_time(start_time, end_time, inclusive='both', axis=None)[source]#
Select values between particular times of the day (e.g., 9:00-9:30 AM).
By setting start_time to be later than end_time,
you can get the times that are not between the two times.

Parameters:

start_timedatetime.time or strInitial time as a time filter limit.

end_timedatetime.time or strEnd time as a time filter limit.

inclusive{âbothâ, âneitherâ, âleftâ, ârightâ}, default âbothâInclude boundaries; whether to set each bound as closed or open.

axis{0 or âindexâ, 1 or âcolumnsâ}, default 0Determine range time on index or columns value.
For Series this parameter is unused and defaults to 0.



Returns:

Series or DataFrameData from the original object filtered to the specified dates range.



Raises:

TypeErrorIf the index is not a DatetimeIndex





See also

at_timeSelect values at a particular time of the day.

firstSelect initial periods of time series based on a date offset.

lastSelect final periods of time series based on a date offset.

DatetimeIndex.indexer_between_timeGet just the index locations for values between particular times of the day.



Examples
>>> i = pd.date_range('2018-04-09', periods=4, freq='1D20min')
>>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)
>>> ts
                     A
2018-04-09 00:00:00  1
2018-04-10 00:20:00  2
2018-04-11 00:40:00  3
2018-04-12 01:00:00  4


>>> ts.between_time('0:15', '0:45')
                     A
2018-04-10 00:20:00  2
2018-04-11 00:40:00  3


You get the times that are not between two times by setting
start_time later than end_time:
>>> ts.between_time('0:45', '0:15')
                     A
2018-04-09 00:00:00  1
2018-04-12 01:00:00  4




