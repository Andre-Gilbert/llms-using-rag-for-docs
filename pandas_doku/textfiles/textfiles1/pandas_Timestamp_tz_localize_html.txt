

pandas.Timestamp.tz_localize#


Timestamp.tz_localize(tz, ambiguous='raise', nonexistent='raise')#
Localize the Timestamp to a timezone.
Convert naive Timestamp to local time zone or remove
timezone from timezone-aware Timestamp.

Parameters:

tzstr, pytz.timezone, dateutil.tz.tzfile or NoneTime zone for time which Timestamp will be converted to.
None will remove timezone holding local time.

ambiguousbool, âNaTâ, default âraiseâWhen clocks moved backward due to DST, ambiguous times may arise.
For example in Central European Time (UTC+01), when going from
03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at
00:30:00 UTC and at 01:30:00 UTC. In such a situation, the
ambiguous parameter dictates how ambiguous times should be
handled.
The behavior is as follows:

bool contains flags to determine if time is dst or not (note
that this flag is only applicable for ambiguous fall dst dates).
âNaTâ will return NaT for an ambiguous time.
âraiseâ will raise an AmbiguousTimeError for an ambiguous time.


nonexistentâshift_forwardâ, âshift_backward, âNaTâ, timedelta, default âraiseâA nonexistent time does not exist in a particular timezone
where clocks moved forward due to DST.
The behavior is as follows:

âshift_forwardâ will shift the nonexistent time forward to the
closest existing time.
âshift_backwardâ will shift the nonexistent time backward to the
closest existing time.
âNaTâ will return NaT where there are nonexistent times.
timedelta objects will shift nonexistent times by the timedelta.
âraiseâ will raise an NonExistentTimeError if there are
nonexistent times.




Returns:

localizedTimestamp


Raises:

TypeErrorIf the Timestamp is tz-aware and tz is not None.




Examples
Create a naive timestamp object:
>>> ts = pd.Timestamp('2020-03-14T15:32:52.192548651')
>>> ts
Timestamp('2020-03-14 15:32:52.192548651')


Add âEurope/Stockholmâ as timezone:
>>> ts.tz_localize(tz='Europe/Stockholm')
Timestamp('2020-03-14 15:32:52.192548651+0100', tz='Europe/Stockholm')


Analogous for pd.NaT:
>>> pd.NaT.tz_localize()
NaT




