

pandas.to_timedelta#


pandas.to_timedelta(arg, unit=None, errors='raise')[source]#
Convert argument to timedelta.
Timedeltas are absolute differences in times, expressed in difference
units (e.g. days, hours, minutes, seconds). This method converts
an argument from a recognized timedelta format / value into
a Timedelta type.

Parameters:

argstr, timedelta, list-like or SeriesThe data to be converted to timedelta.

Changed in version 2.0: Strings with units âMâ, âYâ and âyâ do not represent
unambiguous timedelta values and will raise an exception.


unitstr, optionalDenotes the unit of the arg for numeric arg. Defaults to "ns".
Possible values:

âWâ
âDâ / âdaysâ / âdayâ
âhoursâ / âhourâ / âhrâ / âhâ
âmâ / âminuteâ / âminâ / âminutesâ / âTâ
âSâ / âsecondsâ / âsecâ / âsecondâ
âmsâ / âmillisecondsâ / âmillisecondâ / âmilliâ / âmillisâ / âLâ
âusâ / âmicrosecondsâ / âmicrosecondâ / âmicroâ / âmicrosâ / âUâ
ânsâ / ânanosecondsâ / ânanoâ / ânanosâ / ânanosecondâ / âNâ

Must not be specified when arg context strings and errors="raise".

Deprecated since version 2.1.0: Units âTâ and âLâ are deprecated and will be removed in a future version.


errors{âignoreâ, âraiseâ, âcoerceâ}, default âraiseâ
If âraiseâ, then invalid parsing will raise an exception.
If âcoerceâ, then invalid parsing will be set as NaT.
If âignoreâ, then invalid parsing will return the input.




Returns:

timedeltaIf parsing succeeded.
Return type depends on input:

list-like: TimedeltaIndex of timedelta64 dtype
Series: Series of timedelta64 dtype
scalar: Timedelta






See also

DataFrame.astypeCast argument to a specified dtype.

to_datetimeConvert argument to datetime.

convert_dtypesConvert dtypes.



Notes
If the precision is higher than nanoseconds, the precision of the duration is
truncated to nanoseconds for string inputs.
Examples
Parsing a single string to a Timedelta:
>>> pd.to_timedelta('1 days 06:05:01.00003')
Timedelta('1 days 06:05:01.000030')
>>> pd.to_timedelta('15.5us')
Timedelta('0 days 00:00:00.000015500')


Parsing a list or array of strings:
>>> pd.to_timedelta(['1 days 06:05:01.00003', '15.5us', 'nan'])
TimedeltaIndex(['1 days 06:05:01.000030', '0 days 00:00:00.000015500', NaT],
               dtype='timedelta64[ns]', freq=None)


Converting numbers by specifying the unit keyword argument:
>>> pd.to_timedelta(np.arange(5), unit='s')
TimedeltaIndex(['0 days 00:00:00', '0 days 00:00:01', '0 days 00:00:02',
                '0 days 00:00:03', '0 days 00:00:04'],
               dtype='timedelta64[ns]', freq=None)
>>> pd.to_timedelta(np.arange(5), unit='d')
TimedeltaIndex(['0 days', '1 days', '2 days', '3 days', '4 days'],
               dtype='timedelta64[ns]', freq=None)




