

pandas.Index.copy#


Index.copy(name=None, deep=False)[source]#
Make a copy of this object.
Name is set on the new object.

Parameters:

nameLabel, optionalSet name for new object.

deepbool, default False


Returns:

IndexIndex refer to new object which is a copy of this object.




Notes
In most cases, there should be no functional difference from using
deep, but if deep is passed it will attempt to deepcopy.
Examples
>>> idx = pd.Index(['a', 'b', 'c'])
>>> new_idx = idx.copy()
>>> idx is new_idx
False




