

pandas.tseries.offsets.BusinessDay#


class pandas.tseries.offsets.BusinessDay#
DateOffset subclass representing possibly n business days.

Parameters:

nint, default 1The number of days represented.

normalizebool, default FalseNormalize start/end dates to midnight.




Examples
You can use the parameter n to represent a shift of n business days.
>>> ts = pd.Timestamp(2022, 12, 9, 15)
>>> ts.strftime('%a %d %b %Y %H:%M')
'Fri 09 Dec 2022 15:00'
>>> (ts + pd.offsets.BusinessDay(n=5)).strftime('%a %d %b %Y %H:%M')
'Fri 16 Dec 2022 15:00'


Passing the parameter normalize equal to True, you shift the start
of the next business day to midnight.
>>> ts = pd.Timestamp(2022, 12, 9, 15)
>>> ts + pd.offsets.BusinessDay(normalize=True)
Timestamp('2022-12-12 00:00:00')


Attributes


base
Returns a copy of the calling offset object with n=1 and all other attributes equal.

freqstr
Return a string representing the frequency.

kwds
Return a dict of extra parameters for the offset.

name
Return a string representing the base frequency.

offset
Alias for self._offset.





calendar


holidays


n


nanos


normalize


rule_code


weekmask




Methods


copy
Return a copy of the frequency.

is_anchored
Return boolean whether the frequency is a unit frequency (n=1).

is_month_end
Return boolean whether a timestamp occurs on the month end.

is_month_start
Return boolean whether a timestamp occurs on the month start.

is_on_offset
Return boolean whether a timestamp intersects with this frequency.

is_quarter_end
Return boolean whether a timestamp occurs on the quarter end.

is_quarter_start
Return boolean whether a timestamp occurs on the quarter start.

is_year_end
Return boolean whether a timestamp occurs on the year end.

is_year_start
Return boolean whether a timestamp occurs on the year start.

rollback
Roll provided date backward to next offset only if not on offset.

rollforward
Roll provided date forward to next offset only if not on offset.





