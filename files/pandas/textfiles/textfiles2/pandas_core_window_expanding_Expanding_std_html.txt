

pandas.core.window.expanding.Expanding.std#


Expanding.std(ddof=1, numeric_only=False, engine=None, engine_kwargs=None)[source]#
Calculate the expanding standard deviation.

Parameters:

ddofint, default 1Delta Degrees of Freedom. The divisor used in calculations
is N - ddof, where N represents the number of elements.

numeric_onlybool, default FalseInclude only float, int, boolean columns.

New in version 1.5.0.


enginestr, default None
'cython' : Runs the operation through C-extensions from cython.
'numba' : Runs the operation through JIT compiled code from numba.
None : Defaults to 'cython' or globally setting compute.use_numba

New in version 1.4.0.




engine_kwargsdict, default None
For 'cython' engine, there are no accepted engine_kwargs
For 'numba' engine, the engine can accept nopython, nogil
and parallel dictionary keys. The values must either be True or
False. The default engine_kwargs for the 'numba' engine is
{'nopython': True, 'nogil': False, 'parallel': False}

New in version 1.4.0.






Returns:

Series or DataFrameReturn type is the same as the original object with np.float64 dtype.





See also

numpy.stdEquivalent method for NumPy array.

pandas.Series.expandingCalling expanding with Series data.

pandas.DataFrame.expandingCalling expanding with DataFrames.

pandas.Series.stdAggregating std for Series.

pandas.DataFrame.stdAggregating std for DataFrame.



Notes
The default ddof of 1 used in Series.std() is different
than the default ddof of 0 in numpy.std().
A minimum of one period is required for the rolling calculation.
Examples
>>> s = pd.Series([5, 5, 6, 7, 5, 5, 5])


>>> s.expanding(3).std()
0         NaN
1         NaN
2    0.577350
3    0.957427
4    0.894427
5    0.836660
6    0.786796
dtype: float64




