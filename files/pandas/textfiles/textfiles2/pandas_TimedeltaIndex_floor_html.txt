

pandas.TimedeltaIndex.floor#


TimedeltaIndex.floor(*args, **kwargs)[source]#
Perform floor operation on the data to the specified freq.

Parameters:

freqstr or OffsetThe frequency level to floor the index to. Must be a fixed
frequency like âSâ (second) not âMEâ (month end). See
frequency aliases for
a list of possible freq values.

ambiguousâinferâ, bool-ndarray, âNaTâ, default âraiseâOnly relevant for DatetimeIndex:

âinferâ will attempt to infer fall dst-transition hours based on
order
bool-ndarray where True signifies a DST time, False designates
a non-DST time (note that this flag is only applicable for
ambiguous times)
âNaTâ will return NaT where there are ambiguous times
âraiseâ will raise an AmbiguousTimeError if there are ambiguous
times.


nonexistentâshift_forwardâ, âshift_backwardâ, âNaTâ, timedelta, default âraiseâA nonexistent time does not exist in a particular timezone
where clocks moved forward due to DST.

âshift_forwardâ will shift the nonexistent time forward to the
closest existing time
âshift_backwardâ will shift the nonexistent time backward to the
closest existing time
âNaTâ will return NaT where there are nonexistent times
timedelta objects will shift nonexistent times by the timedelta
âraiseâ will raise an NonExistentTimeError if there are
nonexistent times.




Returns:

DatetimeIndex, TimedeltaIndex, or SeriesIndex of the same type for a DatetimeIndex or TimedeltaIndex,
or a Series with the same index for a Series.



Raises:

ValueError if the freq cannot be converted.



Notes
If the timestamps have a timezone, flooring will take place relative to the
local (âwallâ) time and re-localized to the same timezone. When flooring
near daylight savings time, use nonexistent and ambiguous to
control the re-localization behavior.
Examples
DatetimeIndex
>>> rng = pd.date_range('1/1/2018 11:59:00', periods=3, freq='min')
>>> rng
DatetimeIndex(['2018-01-01 11:59:00', '2018-01-01 12:00:00',
               '2018-01-01 12:01:00'],
              dtype='datetime64[ns]', freq='T')
>>> rng.floor('H')
DatetimeIndex(['2018-01-01 11:00:00', '2018-01-01 12:00:00',
               '2018-01-01 12:00:00'],
              dtype='datetime64[ns]', freq=None)


Series
>>> pd.Series(rng).dt.floor("H")
0   2018-01-01 11:00:00
1   2018-01-01 12:00:00
2   2018-01-01 12:00:00
dtype: datetime64[ns]


When rounding near a daylight savings time transition, use ambiguous or
nonexistent to control how the timestamp should be re-localized.
>>> rng_tz = pd.DatetimeIndex(["2021-10-31 03:30:00"], tz="Europe/Amsterdam")


>>> rng_tz.floor("2H", ambiguous=False)
DatetimeIndex(['2021-10-31 02:00:00+01:00'],
             dtype='datetime64[ns, Europe/Amsterdam]', freq=None)


>>> rng_tz.floor("2H", ambiguous=True)
DatetimeIndex(['2021-10-31 02:00:00+02:00'],
              dtype='datetime64[ns, Europe/Amsterdam]', freq=None)




