

pandas.Series.filter#


Series.filter(items=None, like=None, regex=None, axis=None)[source]#
Subset the dataframe rows or columns according to the specified index labels.
Note that this routine does not filter a dataframe on its
contents. The filter is applied to the labels of the index.

Parameters:

itemslist-likeKeep labels from axis which are in items.

likestrKeep labels from axis for which âlike in label == Trueâ.

regexstr (regular expression)Keep labels from axis for which re.search(regex, label) == True.

axis{0 or âindexâ, 1 or âcolumnsâ, None}, default NoneThe axis to filter on, expressed either as an index (int)
or axis name (str). By default this is the info axis, âcolumnsâ for
DataFrame. For Series this parameter is unused and defaults to None.



Returns:

same type as input object




See also

DataFrame.locAccess a group of rows and columns by label(s) or a boolean array.



Notes
The items, like, and regex parameters are
enforced to be mutually exclusive.
axis defaults to the info axis that is used when indexing
with [].
Examples
>>> df = pd.DataFrame(np.array(([1, 2, 3], [4, 5, 6])),
...                   index=['mouse', 'rabbit'],
...                   columns=['one', 'two', 'three'])
>>> df
        one  two  three
mouse     1    2      3
rabbit    4    5      6


>>> # select columns by name
>>> df.filter(items=['one', 'three'])
         one  three
mouse     1      3
rabbit    4      6


>>> # select columns by regular expression
>>> df.filter(regex='e$', axis=1)
         one  three
mouse     1      3
rabbit    4      6


>>> # select rows containing 'bbi'
>>> df.filter(like='bbi', axis=0)
         one  two  three
rabbit    4    5      6




