

pandas.read_sql_table#


pandas.read_sql_table(table_name, con, schema=None, index_col=None, coerce_float=True, parse_dates=None, columns=None, chunksize=None, dtype_backend=_NoDefault.no_default)[source]#
Read SQL database table into a DataFrame.
Given a table name and a SQLAlchemy connectable, returns a DataFrame.
This function does not support DBAPI connections.

Parameters:

table_namestrName of SQL table in database.

conSQLAlchemy connectable or strA database URI could be provided as str.
SQLite DBAPI connection mode not supported.

schemastr, default NoneName of SQL schema in database to query (if database flavor
supports this). Uses default schema if None (default).

index_colstr or list of str, optional, default: NoneColumn(s) to set as index(MultiIndex).

coerce_floatbool, default TrueAttempts to convert values of non-string, non-numeric objects (like
decimal.Decimal) to floating point. Can result in loss of Precision.

parse_dateslist or dict, default None
List of column names to parse as dates.
Dict of {column_name: format string} where format string is
strftime compatible in case of parsing string times or is one of
(D, s, ns, ms, us) in case of parsing integer timestamps.
Dict of {column_name: arg dict}, where the arg dict corresponds
to the keyword arguments of pandas.to_datetime()
Especially useful with databases without native Datetime support,
such as SQLite.


columnslist, default NoneList of column names to select from SQL table.

chunksizeint, default NoneIf specified, returns an iterator where chunksize is the number of
rows to include in each chunk.

dtype_backend{ânumpy_nullableâ, âpyarrowâ}, default ânumpy_nullableâBack-end data type applied to the resultant DataFrame
(still experimental). Behaviour is as follows:

"numpy_nullable": returns nullable-dtype-backed DataFrame
(default).
"pyarrow": returns pyarrow-backed nullable ArrowDtype
DataFrame.


New in version 2.0.




Returns:

DataFrame or Iterator[DataFrame]A SQL table is returned as two-dimensional data structure with labeled
axes.





See also

read_sql_queryRead SQL query into a DataFrame.

read_sqlRead SQL query or database table into a DataFrame.



Notes
Any datetime values with time zone information will be converted to UTC.
Examples
>>> pd.read_sql_table('table_name', 'postgres:///db_name')  




