

pandas.read_excel#


pandas.read_excel(io, sheet_name=0, *, header=0, names=None, index_col=None, usecols=None, dtype=None, engine=None, converters=None, true_values=None, false_values=None, skiprows=None, nrows=None, na_values=None, keep_default_na=True, na_filter=True, verbose=False, parse_dates=False, date_parser=_NoDefault.no_default, date_format=None, thousands=None, decimal='.', comment=None, skipfooter=0, storage_options=None, dtype_backend=_NoDefault.no_default, engine_kwargs=None)[source]#
Read an Excel file into a pandas DataFrame.
Supports xls, xlsx, xlsm, xlsb, odf, ods and odt file extensions
read from a local filesystem or URL. Supports an option to read
a single sheet or a list of sheets.

Parameters:

iostr, bytes, ExcelFile, xlrd.Book, path object, or file-like objectAny valid string path is acceptable. The string could be a URL. Valid
URL schemes include http, ftp, s3, and file. For file URLs, a host is
expected. A local file could be: file://localhost/path/to/table.xlsx.
If you want to pass in a path object, pandas accepts any os.PathLike.
By file-like object, we refer to objects with a read() method,
such as a file handle (e.g. via builtin open function)
or StringIO.

Deprecated since version 2.1.0: Passing byte strings is deprecated. To read from a
byte string, wrap it in a BytesIO object.


sheet_namestr, int, list, or None, default 0Strings are used for sheet names. Integers are used in zero-indexed
sheet positions (chart sheets do not count as a sheet position).
Lists of strings/integers are used to request multiple sheets.
Specify None to get all worksheets.
Available cases:

Defaults to 0: 1st sheet as a DataFrame
1: 2nd sheet as a DataFrame
"Sheet1": Load sheet with name âSheet1â
[0, 1, "Sheet5"]: Load first, second and sheet named âSheet5â
as a dict of DataFrame
None: All worksheets.


headerint, list of int, default 0Row (0-indexed) to use for the column labels of the parsed
DataFrame. If a list of integers is passed those row positions will
be combined into a MultiIndex. Use None if there is no header.

namesarray-like, default NoneList of column names to use. If file contains no header row,
then you should explicitly pass header=None.

index_colint, str, list of int, default NoneColumn (0-indexed) to use as the row labels of the DataFrame.
Pass None if there is no such column. If a list is passed,
those columns will be combined into a MultiIndex. If a
subset of data is selected with usecols, index_col
is based on the subset.
Missing values will be forward filled to allow roundtripping with
to_excel for merged_cells=True. To avoid forward filling the
missing values use set_index after reading the data instead of
index_col.

usecolsstr, list-like, or callable, default None
If None, then parse all columns.
If str, then indicates comma separated list of Excel column letters
and column ranges (e.g. âA:Eâ or âA,C,E:Fâ). Ranges are inclusive of
both sides.
If list of int, then indicates list of column numbers to be parsed
(0-indexed).
If list of string, then indicates list of column names to be parsed.
If callable, then evaluate each column name against it and parse the
column if the callable returns True.

Returns a subset of the columns according to behavior above.

dtypeType name or dict of column -> type, default NoneData type for data or columns. E.g. {âaâ: np.float64, âbâ: np.int32}
Use object to preserve data as stored in Excel and not interpret dtype.
If converters are specified, they will be applied INSTEAD
of dtype conversion.

enginestr, default NoneIf io is not a buffer or path, this must be set to identify io.
Supported engines: âxlrdâ, âopenpyxlâ, âodfâ, âpyxlsbâ.
Engine compatibility :

âxlrdâ supports old-style Excel files (.xls).
âopenpyxlâ supports newer Excel file formats.
âodfâ supports OpenDocument file formats (.odf, .ods, .odt).
âpyxlsbâ supports Binary Excel files.


Changed in version 1.2.0: The engine xlrd
now only supports old-style .xls files.
When engine=None, the following logic will be
used to determine the engine:

If path_or_buffer is an OpenDocument format (.odf, .ods, .odt),
then odf will be used.
Otherwise if path_or_buffer is an xls format,
xlrd will be used.
Otherwise if path_or_buffer is in xlsb format,
pyxlsb will be used.

New in version 1.3.0.


Otherwise openpyxl will be used.

Changed in version 1.3.0.





convertersdict, default NoneDict of functions for converting values in certain columns. Keys can
either be integers or column labels, values are functions that take one
input argument, the Excel cell content, and return the transformed
content.

true_valueslist, default NoneValues to consider as True.

false_valueslist, default NoneValues to consider as False.

skiprowslist-like, int, or callable, optionalLine numbers to skip (0-indexed) or number of lines to skip (int) at the
start of the file. If callable, the callable function will be evaluated
against the row indices, returning True if the row should be skipped and
False otherwise. An example of a valid callable argument would be lambda
x: x in [0, 2].

nrowsint, default NoneNumber of rows to parse.

na_valuesscalar, str, list-like, or dict, default NoneAdditional strings to recognize as NA/NaN. If dict passed, specific
per-column NA values. By default the following values are interpreted
as NaN: ââ, â#N/Aâ, â#N/A N/Aâ, â#NAâ, â-1.#INDâ, â-1.#QNANâ, â-NaNâ, â-nanâ,
â1.#INDâ, â1.#QNANâ, â<NA>â, âN/Aâ, âNAâ, âNULLâ, âNaNâ, âNoneâ,
ân/aâ, ânanâ, ânullâ.

keep_default_nabool, default TrueWhether or not to include the default NaN values when parsing the data.
Depending on whether na_values is passed in, the behavior is as follows:

If keep_default_na is True, and na_values are specified, na_values
is appended to the default NaN values used for parsing.
If keep_default_na is True, and na_values are not specified, only
the default NaN values are used for parsing.
If keep_default_na is False, and na_values are specified, only
the NaN values specified na_values are used for parsing.
If keep_default_na is False, and na_values are not specified, no
strings will be parsed as NaN.

Note that if na_filter is passed in as False, the keep_default_na and
na_values parameters will be ignored.

na_filterbool, default TrueDetect missing value markers (empty strings and the value of na_values). In
data without any NAs, passing na_filter=False can improve the performance
of reading a large file.

verbosebool, default FalseIndicate number of NA values placed in non-numeric columns.

parse_datesbool, list-like, or dict, default FalseThe behavior is as follows:

bool. If True -> try parsing the index.
list of int or names. e.g. If [1, 2, 3] -> try parsing columns 1, 2, 3
each as a separate date column.
list of lists. e.g. If [[1, 3]] -> combine columns 1 and 3 and parse as
a single date column.
dict, e.g. {âfooâ : [1, 3]} -> parse columns 1, 3 as date and call
result âfooâ

If a column or index contains an unparsable date, the entire column or
index will be returned unaltered as an object data type. If you don`t want to
parse some cells as date just change their type in Excel to âTextâ.
For non-standard datetime parsing, use pd.to_datetime after pd.read_excel.
Note: A fast-path exists for iso8601-formatted dates.

date_parserfunction, optionalFunction to use for converting a sequence of string columns to an array of
datetime instances. The default uses dateutil.parser.parser to do the
conversion. Pandas will try to call date_parser in three different ways,
advancing to the next if an exception occurs: 1) Pass one or more arrays
(as defined by parse_dates) as arguments; 2) concatenate (row-wise) the
string values from the columns defined by parse_dates into a single array
and pass that; and 3) call date_parser once for each row using one or
more strings (corresponding to the columns defined by parse_dates) as
arguments.

Deprecated since version 2.0.0: Use date_format instead, or read in as object and then apply
to_datetime() as-needed.


date_formatstr or dict of column -> format, default NoneIf used in conjunction with parse_dates, will parse dates according to this
format. For anything more complex,
please read in as object and then apply to_datetime() as-needed.

New in version 2.0.0.


thousandsstr, default NoneThousands separator for parsing string columns to numeric. Note that
this parameter is only necessary for columns stored as TEXT in Excel,
any numeric columns will automatically be parsed, regardless of display
format.

decimalstr, default â.âCharacter to recognize as decimal point for parsing string columns to numeric.
Note that this parameter is only necessary for columns stored as TEXT in Excel,
any numeric columns will automatically be parsed, regardless of display
format.(e.g. use â,â for European data).

New in version 1.4.0.


commentstr, default NoneComments out remainder of line. Pass a character or characters to this
argument to indicate comments in the input file. Any data between the
comment string and the end of the current line is ignored.

skipfooterint, default 0Rows at the end to skip (0-indexed).

storage_optionsdict, optionalExtra options that make sense for a particular storage connection, e.g.
host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
are forwarded to urllib.request.Request as header options. For other
URLs (e.g. starting with âs3://â, and âgcs://â) the key-value pairs are
forwarded to fsspec.open. Please see fsspec and urllib for more
details, and for more examples on storage options refer here.

New in version 1.2.0.


dtype_backend{ânumpy_nullableâ, âpyarrowâ}, default ânumpy_nullableâBack-end data type applied to the resultant DataFrame
(still experimental). Behaviour is as follows:

"numpy_nullable": returns nullable-dtype-backed DataFrame
(default).
"pyarrow": returns pyarrow-backed nullable ArrowDtype
DataFrame.


New in version 2.0.


engine_kwargsdict, optionalArbitrary keyword arguments passed to excel engine.



Returns:

DataFrame or dict of DataFramesDataFrame from the passed in Excel file. See notes in sheet_name
argument for more information on when a dict of DataFrames is returned.





See also

DataFrame.to_excelWrite DataFrame to an Excel file.

DataFrame.to_csvWrite DataFrame to a comma-separated values (csv) file.

read_csvRead a comma-separated values (csv) file into DataFrame.

read_fwfRead a table of fixed-width formatted lines into DataFrame.



Notes
For specific information on the methods used for each Excel engine, refer to the pandas
user guide
Examples
The file can be read using the file name as string or an open file object:
>>> pd.read_excel('tmp.xlsx', index_col=0)  
       Name  Value
0   string1      1
1   string2      2
2  #Comment      3


>>> pd.read_excel(open('tmp.xlsx', 'rb'),
...               sheet_name='Sheet3')  
   Unnamed: 0      Name  Value
0           0   string1      1
1           1   string2      2
2           2  #Comment      3


Index and header can be specified via the index_col and header arguments
>>> pd.read_excel('tmp.xlsx', index_col=None, header=None)  
     0         1      2
0  NaN      Name  Value
1  0.0   string1      1
2  1.0   string2      2
3  2.0  #Comment      3


Column types are inferred but can be explicitly specified
>>> pd.read_excel('tmp.xlsx', index_col=0,
...               dtype={'Name': str, 'Value': float})  
       Name  Value
0   string1    1.0
1   string2    2.0
2  #Comment    3.0


True, False, and NA values, and thousands separators have defaults,
but can be explicitly specified, too. Supply the values you would like
as strings or lists of strings!
>>> pd.read_excel('tmp.xlsx', index_col=0,
...               na_values=['string1', 'string2'])  
       Name  Value
0       NaN      1
1       NaN      2
2  #Comment      3


Comment lines in the excel input file can be skipped using the comment kwarg
>>> pd.read_excel('tmp.xlsx', index_col=0, comment='#')  
      Name  Value
0  string1    1.0
1  string2    2.0
2     None    NaN




