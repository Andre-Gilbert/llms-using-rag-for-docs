

pandas.DataFrame.to_latex#


DataFrame.to_latex(buf=None, columns=None, header=True, index=True, na_rep='NaN', formatters=None, float_format=None, sparsify=None, index_names=True, bold_rows=False, column_format=None, longtable=None, escape=None, encoding=None, decimal='.', multicolumn=None, multicolumn_format=None, multirow=None, caption=None, label=None, position=None)[source]#
Render object to a LaTeX tabular, longtable, or nested table.
Requires \usepackage{{booktabs}}. The output can be copy/pasted
into a main LaTeX document or read from an external file
with \input{{table.tex}}.

Changed in version 1.2.0: Added position argument, changed meaning of caption argument.


Changed in version 2.0.0: Refactored to use the Styler implementation via jinja2 templating.


Parameters:

bufstr, Path or StringIO-like, optional, default NoneBuffer to write to. If None, the output is returned as a string.

columnslist of label, optionalThe subset of columns to write. Writes all columns by default.

headerbool or list of str, default TrueWrite out the column names. If a list of strings is given,
it is assumed to be aliases for the column names.

indexbool, default TrueWrite row names (index).

na_repstr, default âNaNâMissing data representation.

formatterslist of functions or dict of {{str: function}}, optionalFormatter functions to apply to columnsâ elements by position or
name. The result of each function must be a unicode string.
List must be of length equal to the number of columns.

float_formatone-parameter function or str, optional, default NoneFormatter for floating point numbers. For example
float_format="%.2f" and float_format="{{:0.2f}}".format will
both result in 0.1234 being formatted as 0.12.

sparsifybool, optionalSet to False for a DataFrame with a hierarchical index to print
every multiindex key at each row. By default, the value will be
read from the config module.

index_namesbool, default TruePrints the names of the indexes.

bold_rowsbool, default FalseMake the row labels bold in the output.

column_formatstr, optionalThe columns format as specified in LaTeX table format e.g. ârclâ for 3
columns. By default, âlâ will be used for all columns except
columns of numbers, which default to ârâ.

longtablebool, optionalUse a longtable environment instead of tabular. Requires
adding a usepackage{{longtable}} to your LaTeX preamble.
By default, the value will be read from the pandas config
module, and set to True if the option styler.latex.environment is
âlongtableâ.

Changed in version 2.0.0: The pandas option affecting this argument has changed.


escapebool, optionalBy default, the value will be read from the pandas config
module and set to True if the option styler.format.escape is
âlatexâ. When set to False prevents from escaping latex special
characters in column names.

Changed in version 2.0.0: The pandas option affecting this argument has changed, as has the
default value to False.


encodingstr, optionalA string representing the encoding to use in the output file,
defaults to âutf-8â.

decimalstr, default â.âCharacter recognized as decimal separator, e.g. â,â in Europe.

multicolumnbool, default TrueUse multicolumn to enhance MultiIndex columns.
The default will be read from the config module, and is set
as the option styler.sparse.columns.

Changed in version 2.0.0: The pandas option affecting this argument has changed.


multicolumn_formatstr, default ârâThe alignment for multicolumns, similar to column_format
The default will be read from the config module, and is set as the option
styler.latex.multicol_align.

Changed in version 2.0.0: The pandas option affecting this argument has changed, as has the
default value to ârâ.


multirowbool, default TrueUse multirow to enhance MultiIndex rows. Requires adding a
usepackage{{multirow}} to your LaTeX preamble. Will print
centered labels (instead of top-aligned) across the contained
rows, separating groups via clines. The default will be read
from the pandas config module, and is set as the option
styler.sparse.index.

Changed in version 2.0.0: The pandas option affecting this argument has changed, as has the
default value to True.


captionstr or tuple, optionalTuple (full_caption, short_caption),
which results in \caption[short_caption]{{full_caption}};
if a single string is passed, no short caption will be set.

Changed in version 1.2.0: Optionally allow caption to be a tuple (full_caption, short_caption).


labelstr, optionalThe LaTeX label to be placed inside \label{{}} in the output.
This is used with \ref{{}} in the main .tex file.

positionstr, optionalThe LaTeX positional argument for tables, to be placed after
\begin{{}} in the output.

New in version 1.2.0.




Returns:

str or NoneIf buf is None, returns the result as a string. Otherwise returns None.





See also

io.formats.style.Styler.to_latexRender a DataFrame to LaTeX with conditional formatting.

DataFrame.to_stringRender a DataFrame to a console-friendly tabular output.

DataFrame.to_htmlRender a DataFrame as an HTML table.



Notes
As of v2.0.0 this method has changed to use the Styler implementation as
part of Styler.to_latex() via jinja2 templating. This means
that jinja2 is a requirement, and needs to be installed, for this method
to function. It is advised that users switch to using Styler, since that
implementation is more frequently updated and contains much more
flexibility with the output.
Examples
Convert a general DataFrame to LaTeX with formatting:
>>> df = pd.DataFrame(dict(name=['Raphael', 'Donatello'],
...                        age=[26, 45],
...                        height=[181.23, 177.65]))
>>> print(df.to_latex(index=False,
...                   formatters={"name": str.upper},
...                   float_format="{:.1f}".format,
... ))  
\begin{tabular}{lrr}
\toprule
name & age & height \\
\midrule
RAPHAEL & 26 & 181.2 \\
DONATELLO & 45 & 177.7 \\
\bottomrule
\end{tabular}




