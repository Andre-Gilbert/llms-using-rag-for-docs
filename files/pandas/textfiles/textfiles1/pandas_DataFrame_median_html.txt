

pandas.DataFrame.median#


DataFrame.median(axis=0, skipna=True, numeric_only=False, **kwargs)[source]#
Return the median of the values over the requested axis.

Parameters:

axis{index (0), columns (1)}Axis for the function to be applied on.
For Series this parameter is unused and defaults to 0.
For DataFrames, specifying axis=None will apply the aggregation
across both axes.

New in version 2.0.0.


skipnabool, default TrueExclude NA/null values when computing the result.

numeric_onlybool, default FalseInclude only float, int, boolean columns. Not implemented for Series.

**kwargsAdditional keyword arguments to be passed to the function.



Returns:

Series or scalar



Examples
>>> s = pd.Series([1, 2, 3])
>>> s.median()
2.0


With a DataFrame
>>> df = pd.DataFrame({'a': [1, 2], 'b': [2, 3]}, index=['tiger', 'zebra'])
>>> df
       a   b
tiger  1   2
zebra  2   3
>>> df.median()
a   1.5
b   2.5
dtype: float64


Using axis=1
>>> df.median(axis=1)
tiger   1.5
zebra   2.5
dtype: float64


In this case, numeric_only should be set to True
to avoid getting an error.
>>> df = pd.DataFrame({'a': [1, 2], 'b': ['T', 'Z']},
...                   index=['tiger', 'zebra'])
>>> df.median(numeric_only=True)
a   1.5
dtype: float64




