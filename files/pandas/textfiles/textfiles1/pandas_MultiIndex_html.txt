

pandas.MultiIndex#


class pandas.MultiIndex(levels=None, codes=None, sortorder=None, names=None, dtype=None, copy=False, name=None, verify_integrity=True)[source]#
A multi-level, or hierarchical, index object for pandas objects.

Parameters:

levelssequence of arraysThe unique labels for each level.

codessequence of arraysIntegers for each level designating which label at each location.

sortorderoptional intLevel of sortedness (must be lexicographically sorted by that
level).

namesoptional sequence of objectsNames for each of the index levels. (name is accepted for compat).

copybool, default FalseCopy the meta-data.

verify_integritybool, default TrueCheck that the levels/codes are consistent and valid.





See also

MultiIndex.from_arraysConvert list of arrays to MultiIndex.

MultiIndex.from_productCreate a MultiIndex from the cartesian product of iterables.

MultiIndex.from_tuplesConvert list of tuples to a MultiIndex.

MultiIndex.from_frameMake a MultiIndex from a DataFrame.

IndexThe base pandas Index type.



Notes
See the user guide
for more.
Examples
A new MultiIndex is typically constructed using one of the helper
methods MultiIndex.from_arrays(), MultiIndex.from_product()
and MultiIndex.from_tuples(). For example (using .from_arrays):
>>> arrays = [[1, 1, 2, 2], ['red', 'blue', 'red', 'blue']]
>>> pd.MultiIndex.from_arrays(arrays, names=('number', 'color'))
MultiIndex([(1,  'red'),
            (1, 'blue'),
            (2,  'red'),
            (2, 'blue')],
           names=['number', 'color'])


See further examples for how to construct a MultiIndex in the doc strings
of the mentioned helper methods.
Attributes


names
Names of levels in MultiIndex.

nlevels
Integer number of levels in this MultiIndex.

levshape
A tuple with the length of each level.

dtypes
Return the dtypes as a Series for the underlying MultiIndex.





levels


codes




Methods


from_arrays(arrays[,Â sortorder,Â names])
Convert arrays to MultiIndex.

from_tuples(tuples[,Â sortorder,Â names])
Convert list of tuples to MultiIndex.

from_product(iterables[,Â sortorder,Â names])
Make a MultiIndex from the cartesian product of multiple iterables.

from_frame(df[,Â sortorder,Â names])
Make a MultiIndex from a DataFrame.

set_levels(levels,Â *[,Â level,Â verify_integrity])
Set new levels on MultiIndex.

set_codes(codes,Â *[,Â level,Â verify_integrity])
Set new codes on MultiIndex.

to_frame([index,Â name,Â allow_duplicates])
Create a DataFrame with the levels of the MultiIndex as columns.

to_flat_index()
Convert a MultiIndex to an Index of Tuples containing the level values.

sortlevel([level,Â ascending,Â ...])
Sort MultiIndex at the requested level.

droplevel([level])
Return index with requested level(s) removed.

swaplevel([i,Â j])
Swap level i with level j.

reorder_levels(order)
Rearrange levels using input order.

remove_unused_levels()
Create new MultiIndex from current that removes unused levels.

get_level_values(level)
Return vector of label values for requested level.

get_indexer(target[,Â method,Â limit,Â tolerance])
Compute indexer and mask for new index given the current index.

get_loc(key)
Get location for a label or a tuple of labels.

get_locs(seq)
Get location for a sequence of labels.

get_loc_level(key[,Â level,Â drop_level])
Get location and sliced index for requested label(s)/level(s).

drop(codes[,Â level,Â errors])
Make a new pandas.MultiIndex with the passed list of codes deleted.





