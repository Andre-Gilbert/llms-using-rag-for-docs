

pandas.DataFrame#


class pandas.DataFrame(data=None, index=None, columns=None, dtype=None, copy=None)[source]#
Two-dimensional, size-mutable, potentially heterogeneous tabular data.
Data structure also contains labeled axes (rows and columns).
Arithmetic operations align on both row and column labels. Can be
thought of as a dict-like container for Series objects. The primary
pandas data structure.

Parameters:

datandarray (structured or homogeneous), Iterable, dict, or DataFrameDict can contain Series, arrays, constants, dataclass or list-like objects. If
data is a dict, column order follows insertion-order. If a dict contains Series
which have an index defined, it is aligned by its index. This alignment also
occurs if data is a Series or a DataFrame itself. Alignment is done on
Series/DataFrame inputs.
If data is a list of dicts, column order follows insertion-order.

indexIndex or array-likeIndex to use for resulting frame. Will default to RangeIndex if
no indexing information part of input data and no index provided.

columnsIndex or array-likeColumn labels to use for resulting frame when data does not have them,
defaulting to RangeIndex(0, 1, 2, â¦, n). If data contains column labels,
will perform column selection instead.

dtypedtype, default NoneData type to force. Only a single dtype is allowed. If None, infer.

copybool or None, default NoneCopy data from inputs.
For dict data, the default of None behaves like copy=True. For DataFrame
or 2d ndarray input, the default of None behaves like copy=False.
If data is a dict containing one or more Series (possibly of different dtypes),
copy=False will ensure that these inputs are not copied.

Changed in version 1.3.0.






See also

DataFrame.from_recordsConstructor from tuples, also record arrays.

DataFrame.from_dictFrom dicts of Series, arrays, or dicts.

read_csvRead a comma-separated values (csv) file into DataFrame.

read_tableRead general delimited file into DataFrame.

read_clipboardRead text from clipboard into DataFrame.



Notes
Please reference the User Guide for more information.
Examples
Constructing DataFrame from a dictionary.
>>> d = {'col1': [1, 2], 'col2': [3, 4]}
>>> df = pd.DataFrame(data=d)
>>> df
   col1  col2
0     1     3
1     2     4


Notice that the inferred dtype is int64.
>>> df.dtypes
col1    int64
col2    int64
dtype: object


To enforce a single dtype:
>>> df = pd.DataFrame(data=d, dtype=np.int8)
>>> df.dtypes
col1    int8
col2    int8
dtype: object


Constructing DataFrame from a dictionary including Series:
>>> d = {'col1': [0, 1, 2, 3], 'col2': pd.Series([2, 3], index=[2, 3])}
>>> pd.DataFrame(data=d, index=[0, 1, 2, 3])
   col1  col2
0     0   NaN
1     1   NaN
2     2   2.0
3     3   3.0


Constructing DataFrame from numpy ndarray:
>>> df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),
...                    columns=['a', 'b', 'c'])
>>> df2
   a  b  c
0  1  2  3
1  4  5  6
2  7  8  9


Constructing DataFrame from a numpy ndarray that has labeled columns:
>>> data = np.array([(1, 2, 3), (4, 5, 6), (7, 8, 9)],
...                 dtype=[("a", "i4"), ("b", "i4"), ("c", "i4")])
>>> df3 = pd.DataFrame(data, columns=['c', 'a'])
...
>>> df3
   c  a
0  3  1
1  6  4
2  9  7


Constructing DataFrame from dataclass:
>>> from dataclasses import make_dataclass
>>> Point = make_dataclass("Point", [("x", int), ("y", int)])
>>> pd.DataFrame([Point(0, 0), Point(0, 3), Point(2, 3)])
   x  y
0  0  0
1  0  3
2  2  3


Constructing DataFrame from Series/DataFrame:
>>> ser = pd.Series([1, 2, 3], index=["a", "b", "c"])
>>> df = pd.DataFrame(data=ser, index=["a", "c"])
>>> df
   0
a  1
c  3


>>> df1 = pd.DataFrame([1, 2, 3], index=["a", "b", "c"], columns=["x"])
>>> df2 = pd.DataFrame(data=df1, index=["a", "c"])
>>> df2
   x
a  1
c  3


Attributes


T
The transpose of the DataFrame.

at
Access a single value for a row/column label pair.

attrs
Dictionary of global attributes of this dataset.

axes
Return a list representing the axes of the DataFrame.

columns
The column labels of the DataFrame.

dtypes
Return the dtypes in the DataFrame.

empty
Indicator whether Series/DataFrame is empty.

flags
Get the properties associated with this pandas object.

iat
Access a single value for a row/column pair by integer position.

iloc
Purely integer-location based indexing for selection by position.

index
The index (row labels) of the DataFrame.

loc
Access a group of rows and columns by label(s) or a boolean array.

ndim
Return an int representing the number of axes / array dimensions.

shape
Return a tuple representing the dimensionality of the DataFrame.

size
Return an int representing the number of elements in this object.

style
Returns a Styler object.

values
Return a Numpy representation of the DataFrame.



Methods


abs()
Return a Series/DataFrame with absolute numeric value of each element.

add(other[,Â axis,Â level,Â fill_value])
Get Addition of dataframe and other, element-wise (binary operator add).

add_prefix(prefix[,Â axis])
Prefix labels with string prefix.

add_suffix(suffix[,Â axis])
Suffix labels with string suffix.

agg([func,Â axis])
Aggregate using one or more operations over the specified axis.

aggregate([func,Â axis])
Aggregate using one or more operations over the specified axis.

align(other[,Â join,Â axis,Â level,Â copy,Â ...])
Align two objects on their axes with the specified join method.

all([axis,Â bool_only,Â skipna])
Return whether all elements are True, potentially over an axis.

any(*[,Â axis,Â bool_only,Â skipna])
Return whether any element is True, potentially over an axis.

apply(func[,Â axis,Â raw,Â result_type,Â args,Â ...])
Apply a function along an axis of the DataFrame.

applymap(func[,Â na_action])
(DEPRECATED) Apply a function to a Dataframe elementwise.

asfreq(freq[,Â method,Â how,Â normalize,Â ...])
Convert time series to specified frequency.

asof(where[,Â subset])
Return the last row(s) without any NaNs before where.

assign(**kwargs)
Assign new columns to a DataFrame.

astype(dtype[,Â copy,Â errors])
Cast a pandas object to a specified dtype dtype.

at_time(time[,Â asof,Â axis])
Select values at particular time of day (e.g., 9:30AM).

backfill(*[,Â axis,Â inplace,Â limit,Â downcast])
(DEPRECATED) Fill NA/NaN values by using the next valid observation to fill the gap.

between_time(start_time,Â end_time[,Â ...])
Select values between particular times of the day (e.g., 9:00-9:30 AM).

bfill(*[,Â axis,Â inplace,Â limit,Â downcast])
Fill NA/NaN values by using the next valid observation to fill the gap.

bool()
(DEPRECATED) Return the bool of a single element Series or DataFrame.

boxplot([column,Â by,Â ax,Â fontsize,Â rot,Â ...])
Make a box plot from DataFrame columns.

clip([lower,Â upper,Â axis,Â inplace])
Trim values at input threshold(s).

combine(other,Â func[,Â fill_value,Â overwrite])
Perform column-wise combine with another DataFrame.

combine_first(other)
Update null elements with value in the same location in other.

compare(other[,Â align_axis,Â keep_shape,Â ...])
Compare to another DataFrame and show the differences.

convert_dtypes([infer_objects,Â ...])
Convert columns to the best possible dtypes using dtypes supporting pd.NA.

copy([deep])
Make a copy of this object's indices and data.

corr([method,Â min_periods,Â numeric_only])
Compute pairwise correlation of columns, excluding NA/null values.

corrwith(other[,Â axis,Â drop,Â method,Â ...])
Compute pairwise correlation.

count([axis,Â numeric_only])
Count non-NA cells for each column or row.

cov([min_periods,Â ddof,Â numeric_only])
Compute pairwise covariance of columns, excluding NA/null values.

cummax([axis,Â skipna])
Return cumulative maximum over a DataFrame or Series axis.

cummin([axis,Â skipna])
Return cumulative minimum over a DataFrame or Series axis.

cumprod([axis,Â skipna])
Return cumulative product over a DataFrame or Series axis.

cumsum([axis,Â skipna])
Return cumulative sum over a DataFrame or Series axis.

describe([percentiles,Â include,Â exclude])
Generate descriptive statistics.

diff([periods,Â axis])
First discrete difference of element.

div(other[,Â axis,Â level,Â fill_value])
Get Floating division of dataframe and other, element-wise (binary operator truediv).

divide(other[,Â axis,Â level,Â fill_value])
Get Floating division of dataframe and other, element-wise (binary operator truediv).

dot(other)
Compute the matrix multiplication between the DataFrame and other.

drop([labels,Â axis,Â index,Â columns,Â level,Â ...])
Drop specified labels from rows or columns.

drop_duplicates([subset,Â keep,Â inplace,Â ...])
Return DataFrame with duplicate rows removed.

droplevel(level[,Â axis])
Return Series/DataFrame with requested index / column level(s) removed.

dropna(*[,Â axis,Â how,Â thresh,Â subset,Â ...])
Remove missing values.

duplicated([subset,Â keep])
Return boolean Series denoting duplicate rows.

eq(other[,Â axis,Â level])
Get Equal to of dataframe and other, element-wise (binary operator eq).

equals(other)
Test whether two objects contain the same elements.

eval(expr,Â *[,Â inplace])
Evaluate a string describing operations on DataFrame columns.

ewm([com,Â span,Â halflife,Â alpha,Â ...])
Provide exponentially weighted (EW) calculations.

expanding([min_periods,Â axis,Â method])
Provide expanding window calculations.

explode(column[,Â ignore_index])
Transform each element of a list-like to a row, replicating index values.

ffill(*[,Â axis,Â inplace,Â limit,Â downcast])
Fill NA/NaN values by propagating the last valid observation to next valid.

fillna([value,Â method,Â axis,Â inplace,Â ...])
Fill NA/NaN values using the specified method.

filter([items,Â like,Â regex,Â axis])
Subset the dataframe rows or columns according to the specified index labels.

first(offset)
Select initial periods of time series data based on a date offset.

first_valid_index()
Return index for first non-NA value or None, if no non-NA value is found.

floordiv(other[,Â axis,Â level,Â fill_value])
Get Integer division of dataframe and other, element-wise (binary operator floordiv).

from_dict(data[,Â orient,Â dtype,Â columns])
Construct DataFrame from dict of array-like or dicts.

from_records(data[,Â index,Â exclude,Â ...])
Convert structured or record ndarray to DataFrame.

ge(other[,Â axis,Â level])
Get Greater than or equal to of dataframe and other, element-wise (binary operator ge).

get(key[,Â default])
Get item from object for given key (ex: DataFrame column).

groupby([by,Â axis,Â level,Â as_index,Â sort,Â ...])
Group DataFrame using a mapper or by a Series of columns.

gt(other[,Â axis,Â level])
Get Greater than of dataframe and other, element-wise (binary operator gt).

head([n])
Return the first n rows.

hist([column,Â by,Â grid,Â xlabelsize,Â xrot,Â ...])
Make a histogram of the DataFrame's columns.

idxmax([axis,Â skipna,Â numeric_only])
Return index of first occurrence of maximum over requested axis.

idxmin([axis,Â skipna,Â numeric_only])
Return index of first occurrence of minimum over requested axis.

infer_objects([copy])
Attempt to infer better dtypes for object columns.

info([verbose,Â buf,Â max_cols,Â memory_usage,Â ...])
Print a concise summary of a DataFrame.

insert(loc,Â column,Â value[,Â allow_duplicates])
Insert column into DataFrame at specified location.

interpolate([method,Â axis,Â limit,Â inplace,Â ...])
Fill NaN values using an interpolation method.

isetitem(loc,Â value)
Set the given value in the column with position loc.

isin(values)
Whether each element in the DataFrame is contained in values.

isna()
Detect missing values.

isnull()
DataFrame.isnull is an alias for DataFrame.isna.

items()
Iterate over (column name, Series) pairs.

iterrows()
Iterate over DataFrame rows as (index, Series) pairs.

itertuples([index,Â name])
Iterate over DataFrame rows as namedtuples.

join(other[,Â on,Â how,Â lsuffix,Â rsuffix,Â ...])
Join columns of another DataFrame.

keys()
Get the 'info axis' (see Indexing for more).

kurt([axis,Â skipna,Â numeric_only])
Return unbiased kurtosis over requested axis.

kurtosis([axis,Â skipna,Â numeric_only])
Return unbiased kurtosis over requested axis.

last(offset)
Select final periods of time series data based on a date offset.

last_valid_index()
Return index for last non-NA value or None, if no non-NA value is found.

le(other[,Â axis,Â level])
Get Less than or equal to of dataframe and other, element-wise (binary operator le).

lt(other[,Â axis,Â level])
Get Less than of dataframe and other, element-wise (binary operator lt).

map(func[,Â na_action])
Apply a function to a Dataframe elementwise.

mask(cond[,Â other,Â inplace,Â axis,Â level])
Replace values where the condition is True.

max([axis,Â skipna,Â numeric_only])
Return the maximum of the values over the requested axis.

mean([axis,Â skipna,Â numeric_only])
Return the mean of the values over the requested axis.

median([axis,Â skipna,Â numeric_only])
Return the median of the values over the requested axis.

melt([id_vars,Â value_vars,Â var_name,Â ...])
Unpivot a DataFrame from wide to long format, optionally leaving identifiers set.

memory_usage([index,Â deep])
Return the memory usage of each column in bytes.

merge(right[,Â how,Â on,Â left_on,Â right_on,Â ...])
Merge DataFrame or named Series objects with a database-style join.

min([axis,Â skipna,Â numeric_only])
Return the minimum of the values over the requested axis.

mod(other[,Â axis,Â level,Â fill_value])
Get Modulo of dataframe and other, element-wise (binary operator mod).

mode([axis,Â numeric_only,Â dropna])
Get the mode(s) of each element along the selected axis.

mul(other[,Â axis,Â level,Â fill_value])
Get Multiplication of dataframe and other, element-wise (binary operator mul).

multiply(other[,Â axis,Â level,Â fill_value])
Get Multiplication of dataframe and other, element-wise (binary operator mul).

ne(other[,Â axis,Â level])
Get Not equal to of dataframe and other, element-wise (binary operator ne).

nlargest(n,Â columns[,Â keep])
Return the first n rows ordered by columns in descending order.

notna()
Detect existing (non-missing) values.

notnull()
DataFrame.notnull is an alias for DataFrame.notna.

nsmallest(n,Â columns[,Â keep])
Return the first n rows ordered by columns in ascending order.

nunique([axis,Â dropna])
Count number of distinct elements in specified axis.

pad(*[,Â axis,Â inplace,Â limit,Â downcast])
(DEPRECATED) Fill NA/NaN values by propagating the last valid observation to next valid.

pct_change([periods,Â fill_method,Â limit,Â freq])
Fractional change between the current and a prior element.

pipe(func,Â *args,Â **kwargs)
Apply chainable functions that expect Series or DataFrames.

pivot(*,Â columns[,Â index,Â values])
Return reshaped DataFrame organized by given index / column values.

pivot_table([values,Â index,Â columns,Â ...])
Create a spreadsheet-style pivot table as a DataFrame.

plot
alias of PlotAccessor

pop(item)
Return item and drop from frame.

pow(other[,Â axis,Â level,Â fill_value])
Get Exponential power of dataframe and other, element-wise (binary operator pow).

prod([axis,Â skipna,Â numeric_only,Â min_count])
Return the product of the values over the requested axis.

product([axis,Â skipna,Â numeric_only,Â min_count])
Return the product of the values over the requested axis.

quantile([q,Â axis,Â numeric_only,Â ...])
Return values at the given quantile over requested axis.

query(expr,Â *[,Â inplace])
Query the columns of a DataFrame with a boolean expression.

radd(other[,Â axis,Â level,Â fill_value])
Get Addition of dataframe and other, element-wise (binary operator radd).

rank([axis,Â method,Â numeric_only,Â ...])
Compute numerical data ranks (1 through n) along axis.

rdiv(other[,Â axis,Â level,Â fill_value])
Get Floating division of dataframe and other, element-wise (binary operator rtruediv).

reindex([labels,Â index,Â columns,Â axis,Â ...])
Conform DataFrame to new index with optional filling logic.

reindex_like(other[,Â method,Â copy,Â limit,Â ...])
Return an object with matching indices as other object.

rename([mapper,Â index,Â columns,Â axis,Â copy,Â ...])
Rename columns or index labels.

rename_axis([mapper,Â index,Â columns,Â axis,Â ...])
Set the name of the axis for the index or columns.

reorder_levels(order[,Â axis])
Rearrange index levels using input order.

replace([to_replace,Â value,Â inplace,Â limit,Â ...])
Replace values given in to_replace with value.

resample(rule[,Â axis,Â closed,Â label,Â ...])
Resample time-series data.

reset_index([level,Â drop,Â inplace,Â ...])
Reset the index, or a level of it.

rfloordiv(other[,Â axis,Â level,Â fill_value])
Get Integer division of dataframe and other, element-wise (binary operator rfloordiv).

rmod(other[,Â axis,Â level,Â fill_value])
Get Modulo of dataframe and other, element-wise (binary operator rmod).

rmul(other[,Â axis,Â level,Â fill_value])
Get Multiplication of dataframe and other, element-wise (binary operator rmul).

rolling(window[,Â min_periods,Â center,Â ...])
Provide rolling window calculations.

round([decimals])
Round a DataFrame to a variable number of decimal places.

rpow(other[,Â axis,Â level,Â fill_value])
Get Exponential power of dataframe and other, element-wise (binary operator rpow).

rsub(other[,Â axis,Â level,Â fill_value])
Get Subtraction of dataframe and other, element-wise (binary operator rsub).

rtruediv(other[,Â axis,Â level,Â fill_value])
Get Floating division of dataframe and other, element-wise (binary operator rtruediv).

sample([n,Â frac,Â replace,Â weights,Â ...])
Return a random sample of items from an axis of object.

select_dtypes([include,Â exclude])
Return a subset of the DataFrame's columns based on the column dtypes.

sem([axis,Â skipna,Â ddof,Â numeric_only])
Return unbiased standard error of the mean over requested axis.

set_axis(labels,Â *[,Â axis,Â copy])
Assign desired index to given axis.

set_flags(*[,Â copy,Â allows_duplicate_labels])
Return a new object with updated flags.

set_index(keys,Â *[,Â drop,Â append,Â inplace,Â ...])
Set the DataFrame index using existing columns.

shift([periods,Â freq,Â axis,Â fill_value,Â suffix])
Shift index by desired number of periods with an optional time freq.

skew([axis,Â skipna,Â numeric_only])
Return unbiased skew over requested axis.

sort_index(*[,Â axis,Â level,Â ascending,Â ...])
Sort object by labels (along an axis).

sort_values(by,Â *[,Â axis,Â ascending,Â ...])
Sort by the values along either axis.

sparse
alias of SparseFrameAccessor

squeeze([axis])
Squeeze 1 dimensional axis objects into scalars.

stack([level,Â dropna,Â sort,Â future_stack])
Stack the prescribed level(s) from columns to index.

std([axis,Â skipna,Â ddof,Â numeric_only])
Return sample standard deviation over requested axis.

sub(other[,Â axis,Â level,Â fill_value])
Get Subtraction of dataframe and other, element-wise (binary operator sub).

subtract(other[,Â axis,Â level,Â fill_value])
Get Subtraction of dataframe and other, element-wise (binary operator sub).

sum([axis,Â skipna,Â numeric_only,Â min_count])
Return the sum of the values over the requested axis.

swapaxes(axis1,Â axis2[,Â copy])
(DEPRECATED) Interchange axes and swap values axes appropriately.

swaplevel([i,Â j,Â axis])
Swap levels i and j in a MultiIndex.

tail([n])
Return the last n rows.

take(indices[,Â axis])
Return the elements in the given positional indices along an axis.

to_clipboard([excel,Â sep])
Copy object to the system clipboard.

to_csv([path_or_buf,Â sep,Â na_rep,Â ...])
Write object to a comma-separated values (csv) file.

to_dict([orient,Â into,Â index])
Convert the DataFrame to a dictionary.

to_excel(excel_writer[,Â sheet_name,Â na_rep,Â ...])
Write object to an Excel sheet.

to_feather(path,Â **kwargs)
Write a DataFrame to the binary Feather format.

to_gbq(destination_table[,Â project_id,Â ...])
Write a DataFrame to a Google BigQuery table.

to_hdf(path_or_buf,Â key[,Â mode,Â complevel,Â ...])
Write the contained data to an HDF5 file using HDFStore.

to_html([buf,Â columns,Â col_space,Â header,Â ...])
Render a DataFrame as an HTML table.

to_json([path_or_buf,Â orient,Â date_format,Â ...])
Convert the object to a JSON string.

to_latex([buf,Â columns,Â header,Â index,Â ...])
Render object to a LaTeX tabular, longtable, or nested table.

to_markdown([buf,Â mode,Â index,Â storage_options])
Print DataFrame in Markdown-friendly format.

to_numpy([dtype,Â copy,Â na_value])
Convert the DataFrame to a NumPy array.

to_orc([path,Â engine,Â index,Â engine_kwargs])
Write a DataFrame to the ORC format.

to_parquet([path,Â engine,Â compression,Â ...])
Write a DataFrame to the binary parquet format.

to_period([freq,Â axis,Â copy])
Convert DataFrame from DatetimeIndex to PeriodIndex.

to_pickle(path[,Â compression,Â protocol,Â ...])
Pickle (serialize) object to file.

to_records([index,Â column_dtypes,Â index_dtypes])
Convert DataFrame to a NumPy record array.

to_sql(name,Â con,Â *[,Â schema,Â if_exists,Â ...])
Write records stored in a DataFrame to a SQL database.

to_stata(path,Â *[,Â convert_dates,Â ...])
Export DataFrame object to Stata dta format.

to_string([buf,Â columns,Â col_space,Â header,Â ...])
Render a DataFrame to a console-friendly tabular output.

to_timestamp([freq,Â how,Â axis,Â copy])
Cast to DatetimeIndex of timestamps, at beginning of period.

to_xarray()
Return an xarray object from the pandas object.

to_xml([path_or_buffer,Â index,Â root_name,Â ...])
Render a DataFrame to an XML document.

transform(func[,Â axis])
Call func on self producing a DataFrame with the same axis shape as self.

transpose(*args[,Â copy])
Transpose index and columns.

truediv(other[,Â axis,Â level,Â fill_value])
Get Floating division of dataframe and other, element-wise (binary operator truediv).

truncate([before,Â after,Â axis,Â copy])
Truncate a Series or DataFrame before and after some index value.

tz_convert(tz[,Â axis,Â level,Â copy])
Convert tz-aware axis to target time zone.

tz_localize(tz[,Â axis,Â level,Â copy,Â ...])
Localize tz-naive index of a Series or DataFrame to target time zone.

unstack([level,Â fill_value,Â sort])
Pivot a level of the (necessarily hierarchical) index labels.

update(other[,Â join,Â overwrite,Â ...])
Modify in place using non-NA values from another DataFrame.

value_counts([subset,Â normalize,Â sort,Â ...])
Return a Series containing the frequency of each distinct row in the Dataframe.

var([axis,Â skipna,Â ddof,Â numeric_only])
Return unbiased variance over requested axis.

where(cond[,Â other,Â inplace,Â axis,Â level])
Replace values where the condition is False.

xs(key[,Â axis,Â level,Â drop_level])
Return cross-section from the Series/DataFrame.





